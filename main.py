# bot.py
import os
import re
import requests
from datetime import datetime, date, timedelta
from dotenv import load_dotenv
from telegram import (
    ReplyKeyboardMarkup, Update,
    InlineKeyboardButton, InlineKeyboardMarkup
)
from telegram.constants import ParseMode
from telegram.ext import (
    ApplicationBuilder, CommandHandler,
    MessageHandler, CallbackQueryHandler,
    ConversationHandler, ContextTypes, filters
)
from telegram.error import BadRequest

# –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–∑ .env
load_dotenv()
TELEGRAM_TOKEN   = os.getenv("TELEGRAM_TOKEN")
AIRTABLE_BASE_ID = os.getenv("AIRTABLE_BASE_ID")
AIRTABLE_TABLE   = os.getenv("AIRTABLE_TABLE")
AIRTABLE_TOKEN   = os.getenv("AIRTABLE_TOKEN")
STAFF_CHAT_ID    = int(os.getenv("STAFF_CHAT_ID"))

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞
NAME, PHONE, SERVICES, DATE_SELECT, TIME_SELECT, CONFIRM = range(6)

# –ü–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ —É—Å–ª—É–≥
SERVICES_LIST = [
    "–ü–æ–ª–Ω—ã–π SMART-–ø–µ–¥–∏–∫—é—Ä (–ø–∞–ª—å—Ü—ã + —Å—Ç–æ–ø—ã + –ø–æ–∫—Ä—ã—Ç–∏–µ)",
    "–ü–µ–¥–∏–∫—é—Ä —Å –ø–æ–∫—Ä—ã—Ç–∏–µ–º (—Ç–æ–ª—å–∫–æ –ø–∞–ª—å—Ü—ã)",
    "SMART-–ø–µ–¥–∏–∫—é—Ä –±–µ–∑ –ø–æ–∫—Ä—ã—Ç–∏—è",
    "–ü–µ–¥–∏–∫—é—Ä —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π (–ø–∞–ª—å—Ü—ã –∏–ª–∏ —Å—Ç–æ–ø—ã)",
    "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–∞–º–ø–æ–Ω–∞–¥—ã (1 —à—Ç.)",
    "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–∏—Ç–∞–Ω–æ–≤–æ–π –Ω–∏—Ç–∏",
    "–ö–æ—Ä—Ä–µ–∫—Ü–∏—è —Ç–∏—Ç–∞–Ω–æ–≤–æ–π –Ω–∏—Ç–∏",
    "–û–Ω–∏—Ö–æ–ª–∏–∑–∏—Å —Ä—É–∫ (1 –Ω–æ–≥–æ—Ç—å)",
    "–û–Ω–∏—Ö–æ–ª–∏–∑–∏—Å —Ä—É–∫ (–≤—Å–µ –Ω–æ–≥—Ç–∏)",
    "–ó–∞—á–∏—Å—Ç–∫–∞ –ø—Å–µ–≤–¥–æ–Ω–∏—Ö–∏–∏",
    "–£–¥–∞–ª–µ–Ω–∏–µ –≤—Ä–æ—Å—à–µ–≥–æ –Ω–æ–≥—Ç—è (2 —Å—Ç–æ—Ä–æ–Ω—ã)",
    "–£–¥–∞–ª–µ–Ω–∏–µ 2 –≤—Ä–æ—Å—à–∏—Ö –Ω–æ–≥—Ç–µ–π",
    "–ü–µ—Ä–µ–≤—è–∑–∫–∞ –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è",
    "–ó–∞—á–∏—Å—Ç–∫–∞ –æ–Ω–∏—Ö–æ–≥—Ä–∏—Ñ–æ–∑–∞ (1 –Ω–æ–≥–æ—Ç—å)",
    "–û–Ω–∏—Ö–æ–≥—Ä–∏—Ñ–æ–∑ (2 –Ω–æ–≥—Ç—è)",
    "–ü–∞—Ä–∞–º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–π –ø–µ–¥–∏–∫—é—Ä",
    "–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–æ–ø—ã (—Ç—Ä–µ—â–∏–Ω—ã, –≥–∏–ø–µ—Ä–∫–µ—Ä–∞—Ç–æ–∑)",
    "–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–æ–ø—ã —Å –º–∏–∫–æ–∑–æ–º",
    "–ó–∞—á–∏—Å—Ç–∫–∞ –º–∏–∫–æ–∑–∞ (1 –Ω–æ–≥–æ—Ç—å)",
    "–ó–∞—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –Ω–æ–≥—Ç–µ–π",
    "–£–¥–∞–ª–µ–Ω–∏–µ –æ–Ω–∏—Ö–æ–ª–∏–∑–∏—Å–∞ (1 –Ω–æ–≥–æ—Ç—å)",
    "–£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–µ—Ä–∂–Ω–µ–≤–æ–π –º–æ–∑–æ–ª–∏ (2 —à—Ç.)",
    "–ü–µ—Ä–≤–∏—á–Ω–æ–µ –≤—ã–≤–µ–¥–µ–Ω–∏–µ –±–æ—Ä–æ–¥–∞–≤–∫–∏",
    "–ü–æ–≤—Ç–æ—Ä–Ω–æ–µ –≤—ã–≤–µ–¥–µ–Ω–∏–µ –±–æ—Ä–æ–¥–∞–≤–∫–∏"
]

def nav_buttons():
    """–ö–Ω–æ–ø–∫–∏ ¬´‚óÄÔ∏è –ù–∞–∑–∞–¥¬ª –∏ ¬´‚ùå –û—Ç–º–µ–Ω–∞¬ª"""
    return [
        [
            InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back"),
            InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")
        ]
    ]

def get_next_workdays(n=12):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–µ–¥—É—é—â–∏–µ n —Ä–∞–±–æ—á–∏—Ö –¥–Ω–µ–π (–ü–Ω, –í—Ç, –°—Ä, –ü—Ç, –°–±), –Ω–∞—á–∏–Ω–∞—è —Å–æ
    —Å–ª–µ–¥—É—é—â–µ–≥–æ –¥–Ω—è –æ—Ç today. –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é n=12, —á—Ç–æ–±—ã –ø–æ–∫—Ä—ã—Ç—å –¥–≤–µ –Ω–µ–¥–µ–ª–∏.
    """
    days = []
    d = date.today() + timedelta(days=1)
    while len(days) < n:
        if d.weekday() in (0, 1, 2, 4, 5):  # –ü–Ω=0, –í—Ç=1, –°—Ä=2, –ü—Ç=4, –°–±=5
            days.append(d)
        d += timedelta(days=1)
    return days

def get_taken_times(date_iso: str) -> set[str]:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–∞–Ω—è—Ç—ã–µ —Å–ª–æ—Ç—ã 'HH:MM' –¥–ª—è –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–π –¥–∞—Ç—ã."""
    url = f"https://api.airtable.com/v0/{AIRTABLE_BASE_ID}/{AIRTABLE_TABLE}"
    headers = {"Authorization": f"Bearer {AIRTABLE_TOKEN}"}
    params = {
        "filterByFormula": f"DATETIME_FORMAT({{Date}}, 'YYYY-MM-DD') = '{date_iso}'"
    }
    resp = requests.get(url, headers=headers, params=params)
    resp.raise_for_status()
    taken = set()
    for rec in resp.json().get("records", []):
        dt = rec["fields"].get("Date")
        if dt:
            taken.add(dt.split("T")[1][:5])
    return taken

def format_display(date_iso: str, time_str: str) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç ISO-–¥–∞—Ç—É –∏ –≤—Ä–µ–º—è 'HH:MM' –≤ '–¥–¥.–º–º.–ì–ì–ì–ì –ß–ß:–ú–ú'."""
    dt = datetime.fromisoformat(f"{date_iso}T{time_str}:00")
    return dt.strftime("%d.%m.%Y %H:%M")

def add_appointment(name: str, phone: str, services: list[str], date_iso: str, time_str: str):
    """–°–æ–∑–¥–∞—ë—Ç –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å –≤ Airtable."""
    url = f"https://api.airtable.com/v0/{AIRTABLE_BASE_ID}/{AIRTABLE_TABLE}"
    headers = {
        "Authorization": f"Bearer {AIRTABLE_TOKEN}",
        "Content-Type": "application/json"
    }
    iso_full = f"{date_iso}T{time_str}:00.000Z"
    fields = {
        "–§–ò–û":     name,
        "–¢–µ–ª–µ—Ñ–æ–Ω": phone,
        "–£—Å–ª—É–≥–∞":  ", ".join(services),
        "Date":    iso_full
    }
    resp = requests.post(url, json={"fields": fields}, headers=headers)
    resp.raise_for_status()

async def notify_staff(ctx: ContextTypes.DEFAULT_TYPE,
                       name: str, phone: str,
                       services: list[str],
                       date_iso: str, time_str: str):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ staff-—á–∞—Ç—É –æ –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏."""
    display = format_display(date_iso, time_str)
    text = (
        f"üìå *–ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å –Ω–∞ –ø—Ä–∏—ë–º*\n"
        f"üë§ –§–ò–û: {name}\n"
        f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {phone}\n"
        f"üíÖ –£—Å–ª—É–≥–∏: {', '.join(services)}\n"
        f"‚è∞ –î–∞—Ç–∞/–≤—Ä–µ–º—è: {display}"
    )
    await ctx.bot.send_message(chat_id=STAFF_CHAT_ID, text=text, parse_mode=ParseMode.MARKDOWN)

# --- Handlers ---

async def start_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –±–æ—Ç–∞."""
    context.user_data.clear()
    kb = ReplyKeyboardMarkup([
        ["üíÖ –ü—Ä–∞–π—Å-–ª–∏—Å—Ç", "–ó–∞–ø–∏—Å—å –Ω–∞ –ø—Ä–∏—ë–º"],
        ["‚è∞ –ì—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã", "üìã –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞"],
        ["‚ùì –ü–æ–º–æ—â—å"]
    ], resize_keyboard=True)
    await update.message.reply_markdown(
        "üëã *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å*! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=kb
    )

async def help_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ú–µ–Ω—é –ø–æ–º–æ—â–∏."""
    await update.message.reply_markdown(
        "‚ùì *–ú–µ–Ω—é –ø–æ–º–æ—â–∏*:\n"
        "üíÖ –ü—Ä–∞–π—Å-–ª–∏—Å—Ç ‚Äî —Ü–µ–Ω—ã –Ω–∞ —É—Å–ª—É–≥–∏\n"
        "–ó–∞–ø–∏—Å—å –Ω–∞ –ø—Ä–∏—ë–º ‚Äî –æ—Ñ–æ—Ä–º–∏—Ç—å –±—Ä–æ–Ω—å\n"
        "‚è∞ –ì—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã ‚Äî —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Å–∞–ª–æ–Ω–∞\n"
        "üìã –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ ‚Äî –∫–∞–∫ –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å—Å—è –∫ –ø—Ä–æ—Ü–µ–¥—É—Ä–µ\n"
        "‚ùì –ü–æ–º–æ—â—å ‚Äî —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ"
    )

async def price_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–∞–π—Å-–ª–∏—Å—Ç."""
    with open("price.jpg", "rb") as f:
        await update.message.reply_photo(f)

async def graf_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã."""
    with open("graf.jpg", "rb") as f:
        await update.message.reply_photo(
            f, caption="‚è∞ *–ì—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã*", parse_mode=ParseMode.MARKDOWN
        )

async def prep_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ."""
    with open("podg.jpg", "rb") as f:
        await update.message.reply_photo(
            f, caption="üìã *–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –ø—Ä–æ—Ü–µ–¥—É—Ä–µ*", parse_mode=ParseMode.MARKDOWN
        )

async def cancel_cb(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–º–µ–Ω—è–µ—Ç —Ç–µ–∫—É—â–∏–π –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –∑–∞–≤–µ—Ä—à–∞–µ—Ç –¥–∏–∞–ª–æ–≥."""
    await update.callback_query.answer()
    await update.callback_query.message.reply_text("‚ùå –ó–∞–ø–∏—Å—å –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    return ConversationHandler.END

async def back_cb(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ –Ω–∞—á–∞–ª—É –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è."""
    await update.callback_query.answer()
    return await book_start(update.callback_query, context)

# 1) –í–≤–æ–¥ –∏–º–µ–Ω–∏ (–§–ò–û)
async def book_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –®–∞–≥ 1: –°–ø—Ä–∞—à–∏–≤–∞–µ–º –§–ò–û.
    –ï—Å–ª–∏ –≤—ã–∑–≤–∞–Ω–æ —á–µ—Ä–µ–∑ callback_query, —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è,
    –∏–Ω–∞—á–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π.
    """
    if update.callback_query:
        m = update.callback_query.message
        await m.edit_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û:")
    else:
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û:")
    return NAME

async def book_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–æ—Ö—Ä–∞–Ω—è–µ–º –§–ò–û –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–≤–æ–¥—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞."""
    context.user_data["name"] = update.message.text.strip()
    await update.message.reply_text(
        "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–ª–µ—Ñ–æ–Ω (11 —Ü–∏—Ñ—Ä):",
        reply_markup=InlineKeyboardMarkup(nav_buttons())
    )
    return PHONE

# 2) –í–≤–æ–¥ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
async def book_phone(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É —É—Å–ª—É–≥."""
    text = update.message.text.strip()
    if not re.fullmatch(r"\d{11}", text):
        await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ 11 —Ü–∏—Ñ—Ä.")
        return PHONE

    context.user_data["phone"] = text

    # –ö–Ω–æ–ø–∫–∏ —Å —É—Å–ª—É–≥–∞–º–∏ + –Ω–∞–≤–∏–≥–∞—Ü–∏—è
    buttons = [
        [InlineKeyboardButton(svc, callback_data=f"toggle_{i}")]
        for i, svc in enumerate(SERVICES_LIST)
    ]
    buttons.append([InlineKeyboardButton("–ì–æ—Ç–æ–≤–æ", callback_data="services_done")])
    buttons.extend(nav_buttons())
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É(–∏):", reply_markup=InlineKeyboardMarkup(buttons))
    return SERVICES

# 3) –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ª—É–≥
async def service_toggle(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–º–µ—á–∞–µ–º/—Å–Ω–∏–º–∞–µ–º –æ—Ç–º–µ—Ç–∫—É —É —É—Å–ª—É–≥–∏ –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –º–µ–Ω—é."""
    q = update.callback_query; await q.answer()
    idx = int(q.data.split("_")[1])
    sel = context.user_data.setdefault("services", [])
    if idx in sel:
        sel.remove(idx)
    else:
        sel.append(idx)

    # –ü–µ—Ä–µ—Å—Ç—Ä–æ–π–∫–∞ –∫–Ω–æ–ø–æ–∫
    buttons = [
        [InlineKeyboardButton(("‚úÖ " if i in sel else "") + svc, callback_data=f"toggle_{i}")]
        for i, svc in enumerate(SERVICES_LIST)
    ]
    buttons.append([InlineKeyboardButton("–ì–æ—Ç–æ–≤–æ", callback_data="services_done")])
    buttons.extend(nav_buttons())
    try:
        await q.edit_message_reply_markup(InlineKeyboardMarkup(buttons))
    except BadRequest as e:
        # –ò–Ω–æ–≥–¥–∞ Telegram —Å—á–∏—Ç–∞–µ—Ç, —á—Ç–æ –∫–Ω–æ–ø–∫–∏ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å
        if "not modified" not in str(e).lower():
            raise
    return SERVICES

async def services_done(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É –¥–∞—Ç—ã –ø–æ—Å–ª–µ —Ç–æ–≥–æ, –∫–∞–∫ —É—Å–ª—É–≥–∏ –≤—ã–±—Ä–∞–Ω—ã."""
    q = update.callback_query; await q.answer()
    days = get_next_workdays(12)  # –î–≤–µ –Ω–µ–¥–µ–ª–∏ —Ä–∞–±–æ—á–∏—Ö –¥–Ω–µ–π
    abbr = {0:'–ü–Ω',1:'–í—Ç',2:'–°—Ä',4:'–ü—Ç',5:'–°–±'}
    rows = []
    # –í—ã–≤–æ–¥–∏–º –ø–æ 3 –¥–∞—Ç—ã –≤ —Ä—è–¥
    for i in range(0, len(days), 3):
        rows.append([
            InlineKeyboardButton(
                f"{abbr[d.weekday()]} {d.strftime('%d.%m')}",
                callback_data=f"date_{d.isoformat()}"
            )
            for d in days[i:i+3]
        ])
    rows.extend(nav_buttons())
    await q.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –ø—Ä–∏—ë–º–∞:", reply_markup=InlineKeyboardMarkup(rows))
    return DATE_SELECT

# 4) –í—ã–±–æ—Ä –¥–∞—Ç—ã
async def date_selected(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É, –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–≤–æ–±–æ–¥–Ω—ã–µ —Å–ª–æ—Ç—ã –∏
    –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±–æ—Ä –≤—Ä–µ–º–µ–Ω–∏. –ï—Å–ª–∏ —Å–≤–æ–±–æ–¥–Ω—ã—Ö –Ω–µ—Ç, –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞–µ–º.
    """
    q = update.callback_query; await q.answer()
    date_iso = q.data.split("_",1)[1]
    context.user_data["date"] = date_iso

    taken = get_taken_times(date_iso)
    slots = ["10:00", "14:00", "17:00"]
    free = [s for s in slots if s not in taken]
    if not free:
        await q.message.reply_text("‚ùå –ù–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤ –Ω–∞ —ç—Ç—É –¥–∞—Ç—É. –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é.")
        return DATE_SELECT

    buttons = [[InlineKeyboardButton(s, callback_data=f"time_{s}")] for s in free]
    buttons.extend(nav_buttons())
    await q.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –ø—Ä–∏—ë–º–∞:", reply_markup=InlineKeyboardMarkup(buttons))
    return TIME_SELECT

# 5) –í—ã–±–æ—Ä –≤—Ä–µ–º–µ–Ω–∏ –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
async def time_selected(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query; await q.answer()
    context.user_data["time"] = q.data.split("_",1)[1]

    data = context.user_data
    summary = (
        f"üë§ –§–ò–û: {data['name']}\n"
        f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {data['phone']}\n"
        f"üíÖ –£—Å–ª—É–≥–∏: {', '.join(SERVICES_LIST[i] for i in data.get('services', []))}\n"
        f"‚è∞ –î–∞—Ç–∞/–≤—Ä–µ–º—è: {format_display(data['date'], data['time'])}"
    )
    kb = InlineKeyboardMarkup([
        [InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm")],
        *nav_buttons()
    ])
    await q.edit_message_text("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞—à—É –∑–∞–ø–∏—Å—å:\n\n" + summary, reply_markup=kb)
    return CONFIRM

# 6) –§–∏–Ω–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–ø–∏—Å–∏
async def finalize(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query; await q.answer()
    data = context.user_data
    add_appointment(
        data["name"], data["phone"],
        [SERVICES_LIST[i] for i in data.get("services", [])],
        data["date"], data["time"]
    )
    await notify_staff(
        context, data["name"], data["phone"],
        [SERVICES_LIST[i] for i in data.get("services", [])],
        data["date"], data["time"]
    )
    await q.edit_message_text("üéâ –ó–∞–ø–∏—Å—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞! –î–æ –≤—Å—Ç—Ä–µ—á–∏.")
    return ConversationHandler.END

def main():
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()

    conv = ConversationHandler(
        entry_points=[MessageHandler(filters.Regex(r"^–ó–∞–ø–∏—Å—å –Ω–∞ –ø—Ä–∏[–µ—ë]–º$"), book_start)],
        states={
            NAME:        [MessageHandler(filters.TEXT & ~filters.COMMAND, book_name)],
            PHONE:       [MessageHandler(filters.TEXT & ~filters.COMMAND, book_phone),
                          CallbackQueryHandler(back_cb, pattern="^back$")],
            SERVICES:    [
                CallbackQueryHandler(service_toggle, pattern=r"^toggle_\d+$"),
                CallbackQueryHandler(services_done,    pattern="^services_done$"),
                CallbackQueryHandler(back_cb,          pattern="^back$")
            ],
            DATE_SELECT: [
                CallbackQueryHandler(date_selected,   pattern=r"^date_\d{4}-\d{2}-\d{2}$"),
                CallbackQueryHandler(back_cb,         pattern="^back$")
            ],
            TIME_SELECT: [
                CallbackQueryHandler(time_selected,   pattern=r"^time_\d{2}:\d{2}$"),
                CallbackQueryHandler(back_cb,         pattern="^back$")
            ],
            CONFIRM:     [
                CallbackQueryHandler(finalize,        pattern="^confirm$"),
                CallbackQueryHandler(back_cb,         pattern="^back$"),
                CallbackQueryHandler(cancel_cb,       pattern="^cancel$")
            ]
        },
        fallbacks=[CallbackQueryHandler(cancel_cb, pattern="^cancel$")],
        allow_reentry=True
    )
    app.add_handler(conv)

    # –ú–µ–Ω—é –≤–Ω–µ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
    app.add_handler(CommandHandler("start",     start_cmd))
    app.add_handler(MessageHandler(filters.Regex(r"^üíÖ –ü—Ä–∞–π—Å-–ª–∏—Å—Ç$"),    price_handler))
    app.add_handler(MessageHandler(filters.Regex(r"^‚è∞ –ì—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã$"),  graf_handler))
    app.add_handler(MessageHandler(filters.Regex(r"^üìã –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞$"),     prep_handler))
    app.add_handler(MessageHandler(filters.Regex(r"^‚ùì –ü–æ–º–æ—â—å$"),         help_handler))

    app.run_polling()

if __name__ == "__main__":
    main()
